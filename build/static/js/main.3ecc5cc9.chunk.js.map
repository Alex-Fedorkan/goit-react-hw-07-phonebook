{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","services/contacts-api.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","_","payload","state","filter","id","isLoading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReduser","devTools","process","getContacts","getFilter","getVisibleContacts","createSelector","contacts","contact","name","toLowerCase","includes","baseURL","fetch","then","response","ok","json","Promise","reject","Error","method","body","JSON","stringify","headers","contactId","ContactForm","useSelector","dispatch","useDispatch","useForm","register","control","handleSubmit","errors","reset","className","s","form","onSubmit","number","find","alert","contactsAPI","catch","addContact","autoComplete","label","htmlFor","input","type","ref","required","text","defaultValue","rules","pattern","render","value","onChange","format","mask","allowEmptyFormatting","btn","ContactItem","deleteContact","onClick","ContactList","useEffect","list","map","Filter","e","target","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,4B,4MCCZC,EAAuBC,YAClC,iCAEWC,EAAuBD,YAClC,iCAEWE,EAAqBF,YAAa,+BAElCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAE/BM,EAAuBN,YAClC,iCAEWO,EAAuBP,YAClC,iCAEWQ,EAAqBR,YAAa,+BAElCS,EAAeT,YAAa,yBCPnCU,EAAQC,YAAc,IAAD,mBACxBV,GAAuB,SAACW,EAAD,YAAMC,WADL,cAExBT,GAAoB,SAACU,EAAD,OAAUD,EAAV,EAAUA,QAAV,4BAA4BC,GAA5B,CAAmCD,OAF/B,cAGxBN,GAAuB,SAACO,EAAD,OAAUD,EAAV,EAAUA,QAAV,OACtBC,EAAMC,QAAO,qBAAGC,KAAgBH,QAJT,IAOrBE,EAASJ,YAAc,GAAD,eACzBF,GAAe,SAACG,EAAD,YAAMC,YAGlBI,EAAYN,aAAc,GAAD,mBAC5BZ,GAAuB,kBAAM,KADD,cAE5BE,GAAuB,kBAAM,KAFD,cAG5BC,GAAqB,kBAAM,KAHC,cAI5BC,GAAoB,kBAAM,KAJE,cAK5BC,GAAoB,kBAAM,KALE,cAM5BC,GAAkB,kBAAM,KANI,cAO5BC,GAAuB,kBAAM,KAPD,cAQ5BC,GAAuB,kBAAM,KARD,cAS5BC,GAAqB,kBAAM,KATC,IAYzBU,EAAQP,YAAc,MAAD,mBACxBT,GAAqB,SAACU,EAAD,YAAMC,WADH,cAExBR,GAAkB,SAACO,EAAD,YAAMC,WAFA,cAGxBL,GAAqB,SAACI,EAAD,YAAMC,WAHH,IAMZM,cAAgB,CAC7BT,QACAK,SACAE,YACAC,UCpCIE,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGWC,EAAQC,YAAe,CAClCC,QAASC,EACTd,aACAe,UAAUC,I,gCCtBCC,EAAc,SAAAvB,GAAK,OAAIA,EAAMJ,OAC7B4B,EAAY,SAAAxB,GAAK,OAAIA,EAAMC,QAI3BwB,EAAqBC,YAChC,CAACH,EAAaC,IACd,SAACG,EAAU1B,GAAX,OACE0B,EAAS1B,QAAO,SAAA2B,GAAO,OACrBA,EAAQC,KAAKC,cAAcC,SAAS9B,EAAO6B,qBCX3CE,EACJ,wFAsCa,EApCO,WACpB,OAAOC,MAAMD,GAASE,MAAK,SAAAC,GACzB,OAAIA,EAASC,GACJD,EAASE,OAGXC,QAAQC,OAAO,IAAIC,MAAM,qBA8BrB,EA1BI,SAAAZ,GACjB,OAAOK,MAAMD,EAAS,CACpBS,OAAQ,OACRC,KAAMC,KAAKC,UAAUhB,GACrBiB,QAAS,CACP,eAAgB,sBAEjBX,MAAK,SAAAC,GACN,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,qBAerB,EAXO,SAAAM,GACpB,OAAOb,MAAM,GAAD,OAAID,EAAJ,YAAec,GAAa,CACtCL,OAAQ,WACPP,MAAK,SAAAC,GACN,IAAKA,EAASC,GACZ,OAAOE,QAAQC,OAAO,IAAIC,MAAM,qB,gBCsDvBO,EAhFK,WAAO,IAAD,EAClBpB,EAAWqB,YAAYzB,GACvB0B,EAAWC,cAFO,EAImCC,cAAnDC,EAJgB,EAIhBA,SAAUC,EAJM,EAINA,QAASC,EAJH,EAIGA,aAAcC,EAJjB,EAIiBA,OAAQC,EAJzB,EAIyBA,MAwBjD,OACE,uBACEC,UAAWC,IAAEC,KACbC,SAAUN,GAxBQ,SAAC,GAAsB,IAApBzB,EAAmB,EAAnBA,KAAMgC,EAAa,EAAbA,OAC7B,GACElC,EAASmC,MACP,SAAAlC,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,iBAQjD,OALAiC,MAAM,GAAD,OAAIlC,EAAJ,kCACL2B,EAAM,CACJ3B,KAAM,GACNgC,OAAQ,KAKZZ,ECNsB,SAAArB,GAAO,OAAI,SAAAqB,GACnCA,EAAS5D,KAET2E,EACcpC,GACXM,MAAK,SAAAC,GAAQ,OAAIc,EAAS3D,EAAkB6C,OAC5C8B,OAAM,SAAA7D,GAAK,OAAI6C,EAAS1D,EAAgBa,QDAhC8D,CADO,CAAErC,OAAMgC,YAExBL,EAAM,CACJ3B,KAAM,GACNgC,OAAQ,QAQRM,aAAa,MAHf,UAKE,uBAAOV,UAAWC,IAAEU,MAAOC,QAAQ,OAAnC,kBAGA,uBACEZ,UAAWC,IAAEY,MACbzC,KAAK,OACL0C,KAAK,OACLC,IAAKpB,EAAS,CAAEqB,UAAU,MAE3BlB,EAAO1B,MAAQ,mBAAG4B,UAAWC,IAAEgB,KAAhB,qCAEhB,uBAAOjB,UAAWC,IAAEU,MAAOC,QAAQ,SAAnC,oBAGA,cAAC,IAAD,CACExC,KAAK,SACLwB,QAASA,EACTsB,cAAc,EACdC,MAAO,CACLH,UAAU,EACVI,QAjDY,kDAmDdC,OAAQ,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACN,cAAC,IAAD,CACEvB,UAAWC,IAAEY,MACbC,KAAM,MACNU,OAAO,qBACPC,KAAK,IACLC,sBAAoB,EACpBJ,MAAOA,EACPC,SAAUA,OAIfzB,EAAOM,QAAU,mBAAGJ,UAAWC,IAAEgB,KAAhB,qCACO,aAAxB,UAAAnB,EAAOM,cAAP,eAAeU,OACd,mBAAGd,UAAWC,IAAEgB,KAAhB,wCAGF,wBAAQjB,UAAWC,IAAE0B,IAAKb,KAAK,SAA/B,6BE5DSc,EAlBK,SAAC,GAAyC,IAAvCnF,EAAsC,EAAtCA,GAAI2B,EAAkC,EAAlCA,KAAMgC,EAA4B,EAA5BA,OAAQyB,EAAoB,EAApBA,cACvC,OACE,+BACGzD,EADH,KACWgC,EACT,wBAAQU,KAAK,SAASgB,QAAS,kBAAMD,EAAcpF,IAAnD,wB,iBC4BSsF,EAvBK,WAClB,IAAM7D,EAAWqB,YAAYvB,GACvBwB,EAAWC,cAMjB,OAJAuC,qBAAU,WACRxC,GAAuBe,IFHQ,SAAAf,GACjCA,EAAShE,KAET+E,IAEG9B,MAAK,SAAAP,GAAQ,OAAIsB,EAAS9D,EAAqBwC,OAC/CsC,OAAM,SAAA7D,GAAK,OAAI6C,EAAS7D,EAAmBgB,YEF3C,CAAC6C,IAGF,oBAAIQ,UAAWC,IAAEgC,KAAjB,SACG/D,EAASgE,KAAI,gBAAGzF,EAAH,EAAGA,GAAI2B,EAAP,EAAOA,KAAMgC,EAAb,EAAaA,OAAb,OACZ,cAAC,EAAD,CAEE3D,GAAIA,EACJ2B,KAAMA,EACNgC,OAAQA,EACRyB,cAAe,SAAApF,GAAE,OAAI+C,GFIFH,EEJyB5C,EFIZ,SAAA+C,GACxCA,EAASzD,KAETwE,EACiBlB,GACdZ,MAAK,kBAAMe,EAASxD,EAAqBqD,OACzCmB,OAAM,SAAA7D,GAAK,OAAI6C,EAASvD,EAAmBU,UANnB,IAAA0C,IERd5C,SCHA0F,EAhBA,WACb,IAAMb,EAAQ/B,YAAYxB,GACpByB,EAAWC,cAEjB,OACE,0DAEE,uBACEqB,KAAK,OACLQ,MAAOA,EACPC,SAAU,SAAAa,GAAC,OAAI5C,EAAStD,EAAakG,EAAEC,OAAOf,eCGvCgB,GAZH,WACV,OACE,sBAAKtC,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,QCJNuC,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,IAAD,CAAUhF,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJiF,SAASC,eAAe,U,kBCb1BpH,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,IAAM,yBAAyB,KAAO,6B","file":"static/js/main.3ecc5cc9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1ThSd\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst isLoading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsError]: (_, { payload }) => payload,\n  [addContactError]: (_, { payload }) => payload,\n  [deleteContactError]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  isLoading,\n  error,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport contactsReduser from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: contactsReduser,\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.items;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.isLoading;\nexport const getError = state => state.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n","const baseURL =\n  'https://my-json-server.typicode.com/Alex-Fedorkan/goit-react-hw-07-phonebook/contacts';\n\nconst fetchContacts = () => {\n  return fetch(baseURL).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return Promise.reject(new Error('Bad request!'));\n  });\n};\n\nconst addContact = contact => {\n  return fetch(baseURL, {\n    method: 'POST',\n    body: JSON.stringify(contact),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Bad request!'));\n  });\n};\n\nconst deleteContact = contactId => {\n  return fetch(`${baseURL}/${contactId}`, {\n    method: 'DELETE',\n  }).then(response => {\n    if (!response.ok) {\n      return Promise.reject(new Error('Bad request!'));\n    }\n  });\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { fetchContacts, addContact, deleteContact };\n","import { useForm, Controller } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport NumberFormat from 'react-number-format';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const { register, control, handleSubmit, errors, reset } = useForm();\n  const phoneRegExp = /^\\+380\\s\\(([0-9]{2})\\)\\s([0-9]{3})-([0-9]{4})$/;\n\n  const addNewContact = ({ name, number }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      reset({\n        name: '',\n        number: '',\n      });\n      return;\n    }\n    const contact = { name, number };\n    dispatch(addContact(contact));\n    reset({\n      name: '',\n      number: '',\n    });\n  };\n\n  return (\n    <form\n      className={s.form}\n      onSubmit={handleSubmit(addNewContact)}\n      autoComplete=\"off\"\n    >\n      <label className={s.label} htmlFor=\"name\">\n        Name\n      </label>\n      <input\n        className={s.input}\n        name=\"name\"\n        type=\"text\"\n        ref={register({ required: true })}\n      />\n      {errors.name && <p className={s.text}>This field is required!</p>}\n\n      <label className={s.label} htmlFor=\"number\">\n        Number\n      </label>\n      <Controller\n        name=\"number\"\n        control={control}\n        defaultValue={false}\n        rules={{\n          required: true,\n          pattern: phoneRegExp,\n        }}\n        render={({ value, onChange }) => (\n          <NumberFormat\n            className={s.input}\n            type={'tel'}\n            format=\"+380 (##) ###-####\"\n            mask=\"_\"\n            allowEmptyFormatting\n            value={value}\n            onChange={onChange}\n          />\n        )}\n      />\n      {errors.number && <p className={s.text}>This field is required!</p>}\n      {errors.number?.type === 'pattern' && (\n        <p className={s.text}>Phone number is not valid!</p>\n      )}\n\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import contactsAPI from '../../services/contacts-api';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n\n  contactsAPI\n    .fetchContacts()\n    .then(contacts => dispatch(fetchContactsSuccess(contacts)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact = contact => dispatch => {\n  dispatch(addContactRequest());\n\n  contactsAPI\n    .addContact(contact)\n    .then(response => dispatch(addContactSuccess(response)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = contactId => dispatch => {\n  dispatch(deleteContactRequest());\n\n  contactsAPI\n    .deleteContact(contactId)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, deleteContact }) => {\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"button\" onClick={() => deleteContact(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport contactsAPI from '../../services/contacts-api';\nimport {\n  fetchContacts,\n  deleteContact,\n} from '../../redux/contacts/contacts-operations';\nimport ContactItem from './ContactItem/ContactItem';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts(contactsAPI.fetchContacts()));\n  }, [dispatch]);\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          deleteContact={id => dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import './App.css';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport { store } from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1WiYD\",\"label\":\"ContactForm_label__38fIA\",\"input\":\"ContactForm_input__1pXP4\",\"btn\":\"ContactForm_btn__1qqQv\",\"text\":\"ContactForm_text__3q1Jx\"};"],"sourceRoot":""}